#
# Checking the conversions with older 0.0.x modules
#

use v6.d;
use Test;
use lib '../version-old/lib';
use lib 'lib';
use Date::Calendar::Strftime:ver<0.1.0>;
use Date::Calendar::Aztec;
use Date::Calendar::Aztec::Cortes;
use Date::Calendar::Bahai;
use Date::Calendar::Bahai::Astronomical;
use Date::Calendar::Coptic;
use Date::Calendar::Ethiopic;
use Date::Calendar::Hebrew;
use Date::Calendar::Hijri;
use Date::Calendar::Gregorian;
use Date::Calendar::FrenchRevolutionary;
use Date::Calendar::FrenchRevolutionary::Arithmetic;
use Date::Calendar::FrenchRevolutionary::Astronomical;
use Date::Calendar::Julian;
use Date::Calendar::Julian::AUC;
use Date::Calendar::Maya;
use Date::Calendar::Maya::Astronomical;
use Date::Calendar::Maya::Spinden;
use Date::Calendar::Persian;
use Date::Calendar::Persian::Astronomical;

my @data-greg = (
       (1400, 12,  5, before-sunrise, 'gr', "Thursday 24 Feb 2022"    , "5sh 05 Esf 1400 ☼", "2022-02-24 shift to daylight", '2022-02-24')
     , (1400, 12,  5, daylight,       'gr', "Thursday 24 Feb 2022"    , "5sh 05 Esf 1400 ☼", "2022-02-24 no problem"       , '2022-02-24')
     , (1400, 12,  5, after-sunset,   'gr', "Thursday 24 Feb 2022"    , "5sh 05 Esf 1400 ☼", "2022-02-24 shift to daylight", '2022-02-24')
            );

my @data-maya = (
       (1403,  7, 11, before-sunrise, 'm0', " 6 Yax 4 Akbal"        , "4sh 11 Meh 1403 ☼", "2024-10-02 wrong intermediate date, should be  5 Yax 4 Akbal")
     , (1403,  7, 11, daylight,       'm0', " 6 Yax 4 Akbal"        , "4sh 11 Meh 1403 ☼", "2024-10-02 no problem")
     , (1403,  7, 11, after-sunset,   'm0', " 6 Yax 4 Akbal"        , "4sh 11 Meh 1403 ☼", "2024-10-02 wrong intermediate date, should be  6 Yax 5 Kan")
     , (1401,  9,  7, before-sunrise, 'm1', " 0 Mac 4 Manik"        , "2sh 07 Aza 1401 ☼", "2022-11-28 wrong intermediate date, should be 19 Ceh 4 Manik")
     , (1401,  9,  7, daylight,       'm1', " 0 Mac 4 Manik"        , "2sh 07 Aza 1401 ☼", "2022-11-28 no problem")
     , (1401,  9,  7, after-sunset,   'm1', " 0 Mac 4 Manik"        , "2sh 07 Aza 1401 ☼", "2022-11-28 wrong intermediate date, should be  0 Mac 5 Lamat")
     , (1403,  1, 20, before-sunrise, 'm2', " 8 Pop 8 Chicchan"     , "2sh 20 Far 1403 ☼", "2024-04-08 wrong intermediate date, should be  7 Pop 8 Chicchan")
     , (1403,  1, 20, daylight,       'm2', " 8 Pop 8 Chicchan"     , "2sh 20 Far 1403 ☼", "2024-04-08 no problem")
     , (1403,  1, 20, after-sunset,   'm2', " 8 Pop 8 Chicchan"     , "2sh 20 Far 1403 ☼", "2024-04-08 wrong intermediate date, should be  8 Pop 9 Cimi")
     , (1403, 10,  1, before-sunrise, 'a0', "20 Tozoztontli 6 Calli", "Shn 01 Dei 1403 ☼", "2024-12-21 wrong intermediate date, should be 19 Tozoztontli 6 Calli")
     , (1403, 10,  1, daylight,       'a0', "20 Tozoztontli 6 Calli", "Shn 01 Dei 1403 ☼", "2024-12-21 no problem")
     , (1403, 10,  1, after-sunset,   'a0', "20 Tozoztontli 6 Calli", "Shn 01 Dei 1403 ☼", "2024-12-21 wrong intermediate date, should be 20 Tozoztontli 7 Cuetzpalin")
     , (1402,  6, 10, before-sunrise, 'a1', "16 Atemoztli 13 Atl"   , "Jom 10 Sha 1402 ☼", "2023-09-01 wrong intermediate date, should be 15 Atemoztli 13 Atl")
     , (1402,  6, 10, daylight,       'a1', "16 Atemoztli 13 Atl"   , "Jom 10 Sha 1402 ☼", "2023-09-01 no problem")
     , (1402,  6, 10, after-sunset,   'a1', "16 Atemoztli 13 Atl"   , "Jom 10 Sha 1402 ☼", "2023-09-01 wrong intermediate date, should be 16 Atemoztli 1 Itzcuintli")
            );

my @data-others = (
       (1400,  7,  4, before-sunrise, 'ba', "Jamál 19 Izz 0178"       , "1sh 04 Meh 1400 ☼", "2021-09-26 shift to daylight")
     , (1400,  7,  4, daylight,       'ba', "Jamál 19 Izz 0178"       , "1sh 04 Meh 1400 ☼", "2021-09-26 no problem")
     , (1400,  7,  4, after-sunset,   'ba', "Jamál 19 Izz 0178"       , "1sh 04 Meh 1400 ☼", "2021-09-26 shift to daylight")
     , (1403, 10, 16, before-sunrise, 'be', "Jamál 07 Sha 0181"       , "1sh 16 Dei 1403 ☼", "2025-01-05 shift to daylight")
     , (1403, 10, 16, daylight,       'be', "Jamál 07 Sha 0181"       , "1sh 16 Dei 1403 ☼", "2025-01-05 no problem")
     , (1403, 10, 16, after-sunset,   'be', "Jamál 07 Sha 0181"       , "1sh 16 Dei 1403 ☼", "2025-01-05 shift to daylight")
     , (1402,  2, 27, before-sunrise, 'co', "Peftoou 09 Pas 1739"     , "4sh 27 Ord 1402 ☼", "2023-05-17 shift to daylight")
     , (1402,  2, 27, daylight,       'co', "Peftoou 09 Pas 1739"     , "4sh 27 Ord 1402 ☼", "2023-05-17 no problem")
     , (1402,  2, 27, after-sunset,   'co', "Peftoou 09 Pas 1739"     , "4sh 27 Ord 1402 ☼", "2023-05-17 shift to daylight")
     , (1401,  4,  6, before-sunrise, 'et', "Maksegno 20 Sen 2014"    , "2sh 06 Tir 1401 ☼", "2022-06-27 shift to daylight")
     , (1401,  4,  6, daylight,       'et', "Maksegno 20 Sen 2014"    , "2sh 06 Tir 1401 ☼", "2022-06-27 no problem")
     , (1401,  4,  6, after-sunset,   'et', "Maksegno 20 Sen 2014"    , "2sh 06 Tir 1401 ☼", "2022-06-27 shift to daylight")
     , (1403,  9, 12, before-sunrise, 'fr', "Duodi 12 Fri 0233"       , "2sh 12 Aza 1403 ☼", "2024-12-02 shift to daylight")
     , (1403,  9, 12, daylight,       'fr', "Duodi 12 Fri 0233"       , "2sh 12 Aza 1403 ☼", "2024-12-02 no problem")
     , (1403,  9, 12, after-sunset,   'fr', "Duodi 12 Fri 0233"       , "2sh 12 Aza 1403 ☼", "2024-12-02 shift to daylight")
     , (1401,  8, 10, before-sunrise, 'fa', "Primidi 11 Bru 0231"     , "3sh 10 Aba 1401 ☼", "2022-11-01 shift to daylight")
     , (1401,  8, 10, daylight,       'fa', "Primidi 11 Bru 0231"     , "3sh 10 Aba 1401 ☼", "2022-11-01 no problem")
     , (1401,  8, 10, after-sunset,   'fa', "Primidi 11 Bru 0231"     , "3sh 10 Aba 1401 ☼", "2022-11-01 shift to daylight")
     , (1402,  6, 21, before-sunrise, 'fe', "Quintidi 25 Fru 0231"    , "3sh 21 Sha 1402 ☼", "2023-09-12 shift to daylight")
     , (1402,  6, 21, daylight,       'fe', "Quintidi 25 Fru 0231"    , "3sh 21 Sha 1402 ☼", "2023-09-12 no problem")
     , (1402,  6, 21, after-sunset,   'fe', "Quintidi 25 Fru 0231"    , "3sh 21 Sha 1402 ☼", "2023-09-12 shift to daylight")
     , (1402, 11,  6, before-sunrise, 'he', "Yom Shishi 16 Shv 5784"  , "Jom 06 Bah 1402 ☼", "2024-01-26 shift to daylight")
     , (1402, 11,  6, daylight,       'he', "Yom Shishi 16 Shv 5784"  , "Jom 06 Bah 1402 ☼", "2024-01-26 no problem")
     , (1402, 11,  6, after-sunset,   'he', "Yom Shishi 16 Shv 5784"  , "Jom 06 Bah 1402 ☼", "2024-01-26 shift to daylight")
     , (1400,  3, 15, before-sunrise, 'hi', "Yaum al-Sabt 24 Shw 1442", "Shn 15 Kho 1400 ☼", "2021-06-05 shift to daylight")
     , (1400,  3, 15, daylight,       'hi', "Yaum al-Sabt 24 Shw 1442", "Shn 15 Kho 1400 ☼", "2021-06-05 no problem")
     , (1400,  3, 15, after-sunset,   'hi', "Yaum al-Sabt 24 Shw 1442", "Shn 15 Kho 1400 ☼", "2021-06-05 shift to daylight")
     , (1403,  9, 29, before-sunrise, 'jl', "Thursday 06 Dec 2024"    , "5sh 29 Aza 1403 ☼", "2024-12-19 shift to daylight")
     , (1403,  9, 29, daylight,       'jl', "Thursday 06 Dec 2024"    , "5sh 29 Aza 1403 ☼", "2024-12-19 no problem")
     , (1403,  9, 29, after-sunset,   'jl', "Thursday 06 Dec 2024"    , "5sh 29 Aza 1403 ☼", "2024-12-19 shift to daylight")
     , (1403,  8,  2, before-sunrise, 'jc', "Wednesday 10 Oct 2777"   , "4sh 02 Aba 1403 ☼", "2024-10-23 shift to daylight")
     , (1403,  8,  2, daylight,       'jc', "Wednesday 10 Oct 2777"   , "4sh 02 Aba 1403 ☼", "2024-10-23 no problem")
     , (1403,  8,  2, after-sunset,   'jc', "Wednesday 10 Oct 2777"   , "4sh 02 Aba 1403 ☼", "2024-10-23 shift to daylight")
            );

my %class =   a0 => 'Date::Calendar::Aztec'
            , a1 => 'Date::Calendar::Aztec::Cortes'
            , ba => 'Date::Calendar::Bahai'
            , be => 'Date::Calendar::Bahai::Astronomical'
            , gr => 'Date::Calendar::Gregorian'
            , co => 'Date::Calendar::Coptic'
            , et => 'Date::Calendar::Ethiopic'
            , fr => 'Date::Calendar::FrenchRevolutionary'
            , fa => 'Date::Calendar::FrenchRevolutionary::Arithmetic'
            , fe => 'Date::Calendar::FrenchRevolutionary::Astronomical'
            , he => 'Date::Calendar::Hebrew'
            , hi => 'Date::Calendar::Hijri'
            , jl => 'Date::Calendar::Julian'
            , jc => 'Date::Calendar::Julian::AUC'
            , m0 => 'Date::Calendar::Maya'
            , m1 => 'Date::Calendar::Maya::Astronomical'
            , m2 => 'Date::Calendar::Maya::Spinden'
            , pe => 'Date::Calendar::Persian'
            , pa => 'Date::Calendar::Persian::Astronomical'
            ;

my %ver   =   a0 => '0.0.3'
            , a1 => '0.0.3'
            , ba => '0.0.2'
            , pe => '0.0.2'
            , be => '0.0.2'
            , co => '0.0.3'
            , et => '0.0.3'
            , fr => '0.0.6'
            , fa => '0.0.6'
            , fe => '0.0.6'
            , gr => '0.0.2'
            , he => '0.0.4'
            , hi => '0.0.2'
            , jl => '0.0.4'
            , jc => '0.0.4'
            , m0 => '0.0.3'
            , m1 => '0.0.3'
            , m2 => '0.0.3'
            , pe => '0.0.2'
            , pa => '0.0.2'
            ;

plan 15 × @data-greg.elems + 12 × @data-others.elems + 12 × @data-maya.elems;

for (|@data-greg, |@data-others) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result) = $datum;
  my Date::Calendar::Persian $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);

  # push-push
  my $d2 = $d1.to-date(%class{$cal});
  is($d2.strftime("%A %d %b %Y"), $str2, "testing push to $str2");
  is($d2.^ver, %ver{$cal});
  my $d3 = $d2.to-date(%class<pe>);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-push to $str2 and $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');

  # push-pull
  my Date::Calendar::Persian $d4 .= new-from-date($d2);
  is($d4.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull to $str2 and $str3, $result");
  is($d4.^ver.Str.substr(0, 4), '0.1.');

  # pull-push
  my $d5 = ::(%class{$cal}).new-from-date($d1);
  is($d5.strftime("%A %d %b %Y"), $str2, "testing pull to $str2");
  is($d5.^ver, %ver{$cal});
  my $d6 = $d5.to-date(%class<pe>);
  is($d6.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-push to $str2 and $str3, $result");
  is($d6.^ver.Str.substr(0, 4), '0.1.');

  # pull-pull
  my Date::Calendar::Persian $d7 .= new-from-date($d5);
  is($d7.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-pull to $str2 and $str3, $result");
  is($d7.^ver.Str.substr(0, 4), '0.1.');
}

for (@data-maya) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result) = $datum;
  my Date::Calendar::Persian $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);
  my Str $str1 = $d1.strftime("%a %d %b %Y %Ep");

  # push-push
  my $d2 = $d1.to-date(%class{$cal});
  is($d2.strftime("%e %B %V %A"), $str2, "testing push to $str2");
  is($d2.^ver, %ver{$cal});
  my $d3 = $d2.to-date(%class<pe>);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-push $str1 to $str2 and $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');

  # push-pull
  my Date::Calendar::Persian $d4 .= new-from-date($d2);
  is($d4.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull $str1 to $str2 and $str3, $result");
  is($d4.^ver.Str.substr(0, 4), '0.1.');

  # pull-push
  my $d5 = ::(%class{$cal}).new-from-date($d1);
  is($d5.strftime("%e %B %V %A"), $str2, "testing pull to $str2");
  is($d5.^ver, %ver{$cal});
  my $d6 = $d5.to-date(%class<pe>);
  is($d6.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-push $str1 to $str2 and $str3, $result");
  is($d6.^ver.Str.substr(0, 4), '0.1.');

  # pull-pull
  my Date::Calendar::Persian $d7 .= new-from-date($d5);
  is($d7.strftime("%a %d %b %Y %Ep"), $str3, "testing pull-pull $str1 to $str2 and $str3, $result");
  is($d7.^ver.Str.substr(0, 4), '0.1.');
}

# Conversion with core class Date: only push-pull tests
for (@data-greg) -> $datum {
  my ($year, $month, $day, $daypart, $cal, $str2, $str3, $result, $str4) = $datum;
  my Date::Calendar::Persian $d1 .= new(year => $year, month => $month, day => $day, daypart => $daypart);

  my $d2 = $d1.to-date('Date');
  is($d2.gist, $str4, "testing push from $year-$month-$day to $str4");
  my Date::Calendar::Persian $d3 .= new-from-date($d2);
  is($d3.strftime("%a %d %b %Y %Ep"), $str3, "testing push-pull from $year-$month-$day to Gregorian $str4 and then $str3, $result");
  is($d3.^ver.Str.substr(0, 4), '0.1.');
}

done-testing;
